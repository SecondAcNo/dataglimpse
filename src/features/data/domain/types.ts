/**
 * Domain Model for Data Feature
 * ---------------------------------------------------------------------------
 * - このファイルは「データルーム」で利用される
 *   ドメイン型を集約する。
 */

import type { RowObject } from "@/lib/sqlite";

/* ============================================================================
 * 基本情報
 * ==========================================================================*/

/**
 * テーブルの最小限のメタ情報
 * - サイズや更新日時など拡張フィールドは任意
 */
export type TableBasic = {
  /** テーブル名（ユニーク識別子として利用） */
  name: string;
  /** 総行数 */
  rowCount: number;
  /** 総列数 */
  colCount: number;
  /** テーブルの推定サイズ（バイト単位） */
  sizeBytes?: number;
  /** 最終更新日時（ISO8601文字列推奨） */
  lastUpdatedAt?: string;
  /** データソースの識別子（例: "csv", "manual-import" 等） */
  source?: string;
};

/* ============================================================================
 * 列情報
 * ==========================================================================*/

/**
 * 列メタ情報
 * - 型や制約に関する最小限の情報を表現
 */
export type ColumnMeta = {
  /** 列名 */
  name: string;
  /** DBが持つ型情報（SQLite型名など） */
  dataType: string;
  /** NULL 許容か */
  nullable: boolean;
  /** 主キー列か */
  isPrimaryKey: boolean;
  /** ユニーク制約を持つか */
  isUnique: boolean;

  /** distinct 値の数（必要に応じて遅延ロード） */
  distinctCount?: number;
  /** サンプル値（表示用、最大数件程度を想定） */
  sampleValues?: unknown[];
};

/* ============================================================================
 * データ品質指標
 * ==========================================================================*/

/**
 * テーブルの品質メトリクス
 * - 欠損率や重複率など、データ健全性を測る指標群
 */
export type QualityMetrics = {
  /**
   * 列ごとの欠損率
   * - 値域は 0.0〜1.0（例: 0.2 = 20% が NULL）
   */
  nullRateByCol: Record<string, number>;

  /**
   * 重複行率（全列をキーとした単純重複判定）
   * - 値域は 0.0〜1.0
   * - undefined の場合は未計算
   */
  duplicateRowRate?: number;

  /**
   * 外部キー整合性チェックの結果（coverage が閾値を超える候補のみ）
   */
  fkIntegrity?: {
    /** 子テーブル名 */
    fromTable: string;
    /** 子列名 */
    fromColumn: string;
    /** 親テーブル名 */
    toTable: string;
    /** 親列名 */
    toColumn: string;
    /**
     * カバレッジ（0.0〜1.0）
     * - 子の外部キー値のうち、親で存在が確認できた割合
     */
    coverage: number;
  }[];
};

/* ============================================================================
 * リレーション情報
 * ==========================================================================*/

/**
 * 推定されたテーブル間リレーション
 * - 主に "_id" 列を基点とした子→親関係を想定
 */
export type Relation = {
  /** 関係の向き（child=外部キーを持つ側, parent=参照される側） */
  direction: "parent" | "child";

  /** 子テーブル名 */
  fromTable: string;
  /** 子列名 */
  fromColumn: string;

  /** 親テーブル名 */
  toTable: string;
  /** 親列名 */
  toColumn: string;

  /** JOIN例（UI表示用のサンプルSQL文字列） */
  joinExample: string;
};

/* ============================================================================
 * 集約型
 * ==========================================================================*/

/**
 * テーブルの詳細情報
 * - 基本情報 + 列メタ + 品質指標 + 推定リレーションをまとめたもの
 */
export type TableDetail = {
  basic: TableBasic;
  columns: ColumnMeta[];
  quality: QualityMetrics;
  relations: Relation[];
};

/**
 * 汎用ページネーション結果
 * - クエリ結果やプレビュー表示に利用
 */
export type Page<T> = {
  /** 行データ配列 */
  rows: T[];
  /** 現在のページ番号（0-based） */
  page: number;
  /** ページサイズ（1ページあたり行数） */
  pageSize: number;
  /** 総行数 */
  totalRows: number;
};

/* ============================================================================
 * 外部型再エクスポート
 * ==========================================================================*/

/**
 * sql.js が返す行オブジェクト
 * - 各列名をキーに持つ Record<string, unknown>
 */
export type { RowObject };
